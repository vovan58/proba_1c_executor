// пример из документации и книги Богачевой
//  { - показ типов -
метод ПримерПоказаБазовыхТипов()
    ПоказатьБазовыеТипы(Тип<Число>)
    ПоказатьБазовыеТипы(Тип<Массив<Строка>>)
    ПоказатьБазовыеТипы(Тип<ПотокЗаписи>)
    ПоказатьБазовыеТипы(Тип<Массив<Число>>)
    ПоказатьБазовыеТипы(Тип<ИсключениеНедопустимыйАргумент>)
;
метод ПоказатьБазовыеТипы(Параметр: Тип)
    Консоль.Записать("Базовые типы для типа " + Параметр.Представление()+ " (" + Параметр.ВСтроку()+")")
    пер Результат: Множество <Тип> = СобратьПредков(Параметр)
    для Элемент из Результат
        Консоль.Записать(Элемент.Представление()+ " (" + Элемент.ВСтроку()+")")
    ;
    Консоль.Записать(":......:")
;
метод СобратьПредков(Значение: Тип, Предки: Множество<Тип> = {}): Множество<Тип>
    для БазовыйТип из Значение.БазовыеТипы
        Предки.Добавить(БазовыйТип)
        СобратьПредков(БазовыйТип, Предки)
    ;
    возврат Предки
;
// - показ типов -}

// #импорт include/logger.sbsl

///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта



// { - праметры из JSON -
///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////
/*
Вызов скрипта с ключевыми параметрами, которые расположены в файле JSON
имена праметров должны быть без предшествующего знака минус
*/
метод Скрипт(ПутьФайлJSON:Строка) : Число
    пер СоответствиеПараметровJSON : Соответствие<Строка,Объект?>
    пер СоответствиеДоп : Соответствие<Строка, Строка>
    пер ФайлJSON = новый Файл(ПутьФайлJSON)

    если ФайлJSON.Существует()
        пер ПотокЧтенияJSON : ПотокЧтения = ФайлJSON.ОткрытьПотокЧтения()
        СоответствиеПараметровJSON = Стд::Json::СериализацияJson.ПрочитатьСоответствие(ПотокЧтенияJSON)
        для Элемент из СоответствиеПараметровJSON
            СоответствиеДоп.Вставить(Элемент.Ключ, Элемент.Значение.Представление())
        ;
    иначе
        пер Ошибка : Строка = "File '" + ФайлJSON.Имя +"' is missing"
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеВремениВыполнения(Ошибка)
   ;
    // здесь вызывается основной скрипт с ключевы параметрами
   возврат гвк_Скрипт(СоответствиеДоп)

;

// - праметры из JSON - }

метод гвк_Скрипт(СоответствиеПараметров:Соответствие<Строка, Строка>)
    
;